////
/// @group Internals
/// @author xi, strarsis, drtimofey, davidkpiano
/// @link https://gist.github.com/xi/5bbe8480c48e2fc10ab5
/// @link https://github.com/strarsis/sass-math-pow
/// @link https://github.com/thoughtbot/bitters/issues/167
/// @link https://github.com/thoughtbot/bourbon/issues/717
/// @link https://gist.github.com/davidkpiano/ad6e6771df050ff3727f
////

/// @access private
@function fs-exp-taylor($x, $steps) {
  $item: 1;
  $result: 1;

  @for $i from 1 to $steps {
    $item: $item * $x / $i;
    $result: $result + $item;
  }

  @return $result;
}

/// @access private
@function fs-ln-taylor($x, $steps) {
  $z: ($x - 1) / ($x + 1);
  $power: $z;
  $result: $z;

  @for $i from 1 to $steps {
    $power: $power * $z * $z;
    $result: $result + $power / (2 * $i + 1);
  }

  @return 2 * $result;
}

/// @access private
@function fs-pow-int($base, $exponent) {
  @if $exponent < 0 {
    @return 1 / fs-pow-int($base, -$exponent);
  }
  @else if $exponent == 0 {
    @return 1;
  }
  @else if $exponent == 1 {
    @return $base;
  }
  @else {
    $exp: floor($exponent / 2);
    $pow: fs-pow-int($base, $exp);

    @if $exp * 2 == $exponent {
      @return $pow * $pow;
    }
    @else {
      @return $pow * $pow * $base;
    }
  }
}

/// @access private
@function fs-log-approx($x) {
  @if $x <= 0 {
    @error 'ðŸ”´ Canâ€™t calculate log of #{$x}';
  }
  @else if $x >= 1 {
    // choose the smaller option (-1) because it yield better results in fs-ln()
    @return str-length(inspect(round($x))) - 1;
  }
  @else {
    @return -1 * str-length(inspect(round(1 / $x)));
  }
}

/// @access private
@function fs-ln($x, $steps: 32) {
  $ln10: 2.302585092994046;
  $approx: fs-log-approx($x);

  // $y is in range [1, 10]
  $y: $x / fs-pow-int(10, $approx);

  @return $approx * $ln10 + fs-ln-taylor($y, $steps);
}

/// Power function (supports fractional exponents)
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
@function fs-pow($x, $exponent, $steps: 32) {
  $exp1: round($exponent);
  $exp2: $exponent - $exp1;
  $pow1: fs-pow-int($x, $exp1);

  @if $exp2 == 0 {
    @return $pow1;
  }
  @else {
    $y: fs-ln($x, $steps) * $exp2;
    $pow2: fs-exp-taylor($y, $steps);

    @return $pow1 * $pow2;
  }
}
