/// Checks if media query falls within a fixed width
/// @group Internals
/// @require {function} fs-strip
/// @param {String} $mq-prefix
/// @param {Number} $mq-width
/// @param {Number} $cutoff [$fs-fixed-width]
/// @param {String} $cutoff-prefix ['max']
/// @return {Boolean}
///
@function fs-mq-width-check($mq-prefix, $mq-width, $cutoff: $fs-fixed-width, $cutoff-prefix: 'max') {
  // Check to make sure width is a number
  @if type-of($mq-width) == 'number' {
    @if unitless($mq-width) {
      $mq-width: $mq-width * 1px;
    }
    // em or rem
    @else if unit($mq-width) == 'em' or unit($mq-width) == 'rem' {
      $mq-width: fs-strip($mq-width) * $fs-base-font-size;
    }
  }
  @else {
    @error 'üî¥  Media query value, #{$mq-width}, is not a number';
  }

  // Compare width to cutoff
  @if $cutoff-prefix == 'max' {
    @if $mq-prefix == 'min' and $mq-width <= $cutoff {
      @return true;
    }
    @else if $mq-prefix == 'max' and $mq-width >= $cutoff {
      @return true;
    }
    @else {
      @return false;
    }
  }
  @else if $cutoff-prefix == 'min' {
    @if $mq-prefix == 'min' and $mq-width >= $cutoff {
      @return true;
    }
    @else if $mq-prefix == 'max' and $mq-width >= $cutoff {
      @return true;
    }
    @else {
      @return false;
    }
  }
  @else {
    @error 'üî¥  fs-mq-width-check() $cutoff-prefix of ‚Äú#{$cutoff-prefix}‚Äù is not valid';
  }
}


/// Media query mixin
/// @require {function} fs-breakpoint
/// @require {function} fs-em
/// @param {String | Number | Map} $fs-breakpoints - Numbers, maps, and named breakpoints from `$fs-breakpoint` are supported
///
/// @example scss - Named breakpoint
///   fs-mq('wide') {‚Ä¶}
///
/// @example scss - Number
///   fs-mq(600px) {‚Ä¶}
///
/// @example scss - Map
///   fs-mq(( min-width: 200px, max-width: 500px, min-height: 400px )) {‚Ä¶}
///
/// @link http://alwaystwisted.com/post.php?s=2013-04-01-my-media-query-mixin
/// @link http://jakearchibald.github.io/sass-ie/
/// @link http://stackoverflow.com/a/22262489
///
/// @ignore Demo page http://sassmeister.com/gist/c956b7cbe59ac4deddbb
/// @ignore Note: EMs in media queries are relative to the initial browser font-size (16px by default) http://www.w3.org/TR/css3-mediaqueries/#units
///
@mixin fs-mq($fs-breakpoints...) {
  // Check for fixed width or media query cutoff variables
  $has-cutoff: $fs-fixed-width or $fs-mq-min-cutoff or $fs-mq-max-cutoff;

  // If only one argument passed, set $breakpoint equal to that argument
  @if length($fs-breakpoints) == 1 {
    $fs-breakpoints: nth($fs-breakpoints, 1);
  }

  // Sass Map Argument
  //
  // Example: fs-mq(( condition: value[, condition: value, ...] ))
  @if type-of($fs-breakpoints) == 'map' {
    // @debug 'üîµ  fs-mq(#{inspect($fs-breakpoints)}) is a map';
    // Convert breakpoints map to media query string
    $mq-conditions: '';
    @each $type, $value in $fs-breakpoints {
      $mq-conditions: str-insert($mq-conditions, 'and (#{$type}: #{fs-em($value, 16px)}) ', -1);
    }

    // Check for cutoff vars, run tests if present
    @if $has-cutoff {
      $pass-test: false;

      // Loop through each media-query condition and test
      @each $type, $mq-width in $fs-breakpoints {
        $split-index: str-index($type, '-');
        $prefix: str-slice($type, 1, $split-index - 1);
        $suffix: str-slice($type, $split-index + 1, -1);
        // Only test the width, ignore min/max-height
        @if $suffix == 'width' {
          // Test fixed width cutoff (max-width)
          @if $fs-fixed-width and fs-mq-width-check($prefix, $mq-width, $fs-fixed-width, 'max') {
            $pass-test: true;
          }
          // Test both min and max-width cutoffs
          @if $fs-mq-min-cutoff and $fs-mq-max-cutoff {
            @if fs-mq-width-check($prefix, $mq-width, $fs-mq-min-cutoff, 'min') and fs-mq-width-check($prefix, $mq-width, $fs-mq-max-cutoff, 'max') {
              $pass-test: true;
            }
          }
          // Test min-width cutoff
          @else if $fs-mq-min-cutoff and fs-mq-width-check($prefix, $mq-width, $fs-mq-min-cutoff, 'min') {
            $pass-test: true;
          }
          // Test max-width cutoff
          @else if $fs-mq-max-cutoff and fs-mq-width-check($prefix, $mq-width, $fs-mq-max-cutoff, 'max') {
            $pass-test: true;
          }
        }
        @else {
          $pass-test: true;
        }
      }

      // If passed test, output the styles
      @if $pass-test {
        // Do not output media queries for fixed width stylehseets
        @if $fs-fixed-width {
          @content;
        }
        // Output the media query
        @else {
          @media screen #{$mq-conditions} {
            @content;
          }
        }
      }
    }
    // No cutoff vars set, so output the media query
    @else {
      @media screen #{$mq-conditions} {
        @content;
      }
    }
  }

  // String Argument(s)
  //
  // fs-mq( width, [min/max] ) or fs-mq('[named breakpoint]')
  @else {
    $mq-width: $fs-breakpoints;
    $prefix: 'min';// Default

    // If second argument was passed, use as prefix
    @if length($fs-breakpoints) >= 2 {
      $mq-width: nth($fs-breakpoints, 1);
      $prefix: nth($fs-breakpoints, 2);
    }
    // If more than 2 args passed, output a warning
    @else if length($fs-breakpoints) > 2 {
      @error 'üî¥  Too many arguments passed, fs-mq(#{$fs-breakpoints})';
    }

    // Check if named breakpoint was passed
    @if type-of($mq-width) == 'string' {
      $bp: fs-breakpoint($mq-width);
      @if type-of($bp) == 'number' and $bp > 0 {
        $mq-width: $bp;
      }
      // Ignore unrecognized named breakpoints
      @else {
        @error 'üî¥  Could not find ‚Äú#{$mq-width}‚Äù in $fs-breakpoints map, styles omitted';
      }
    }

    // Generate the media query

    // Change unitles values to px
    @if type-of($mq-width) == 'number' and unitless($mq-width) {
      $mq-width: $mq-width * 1px;
    }

    // Check for cutoff vars, run tests if present
    @if $has-cutoff {
      $pass-test: false;

      // Test fixed width cutoff (max-width)
      @if $fs-fixed-width and fs-mq-width-check($prefix, $mq-width, $fs-fixed-width, 'max') {
        $pass-test: true;
      }
      // Test both min and max-width cutoffs
      @if $fs-mq-min-cutoff and $fs-mq-max-cutoff {
        @if fs-mq-width-check($prefix, $mq-width, $fs-mq-min-cutoff, 'min') and fs-mq-width-check($prefix, $mq-width, $fs-mq-max-cutoff, 'max') {
          $pass-test: true;
        }
      }
      // Test min-width cutoff
      @else if $fs-mq-min-cutoff and fs-mq-width-check($prefix, $mq-width, $fs-mq-min-cutoff, 'min') {
        $pass-test: true;
      }
      // Test max-width cutoff
      @else if $fs-mq-max-cutoff and fs-mq-width-check($prefix, $mq-width, $fs-mq-max-cutoff, 'max') {
        $pass-test: true;
      }

      // If passed test, output the styles
      @if $pass-test {
        // Do not output media queries for fixed width stylehseets
        @if $fs-fixed-width {
          @content;
        }
        // Output the media query
        @else {
          // @debug '#{$mq-width}, #{em($mq-width)}';
          @media all and (#{$prefix}-width: fs-em($mq-width, 16px)) {
            @content;
          }
        }
      }
    }
    // No cutoff vars set, so output the media query
    @else {
      // debug '#{$mq-width}, #{em($mq-width)}';
      @media all and (#{$prefix}-width: fs-em($mq-width, 16px)) {
        @content;
      }
    }
  }
}
