// Theme color mixin
/// @param {List} $props - Properties to apply theme color to
/// @param {Percentage} $darken [false] - Amount to darken theme color by (optional)
/// @param {Percentage} $lighten [false] - Amount to lighten theme color by (optional)
/// @param {Number} $opacity [1] - Opacity of theme color (optional)
/// @param {String} $pseudo [false] - Pseudo selector to apply (optional)
/// @param {Boolean} $self [false] - Theme class
///
/// @example scss
///   .t-color {
///     @include fs-theme-color( color fill );
///   }
///
///   .t-color-clickable {
///     @include static {
///       @include fs-theme-color( color fill );
///     }
///
///     @include attention {
///       @include fs-theme-color( color fill, $darken: 8% );
///     }
///   }
///
///   .t-bg {
///     @include fs-theme-color( background-color );
///   }
///
///   .t-bg-clickable {
///     @include static {
///       @include fs-theme-color( background-color );
///     }
///
///     @include attention {
///       @include fs-theme-color( background-color, $darken: 8% );
///     }
///   }
///
@mixin fs-theme-color($props, $darken: false, $lighten: false, $opacity: 1, $pseudo: false, $self: false, $prefix: 't-') {
  @if not global-variable-exists(fs-colors) {
    @error "üî¥  $fs-colors map does not exist";
  }

  @if not map-has-key($fs-colors, 'theme') {
    @error "üî¥  $fs-colors map does not contain ‚Äútheme‚Äù key";
  }

  $theme-colors: map-get($fs-colors, 'theme');

  @each $area, $color in $theme-colors {

    @if $darken {
      @if unit($darken) == '%' {
        $color: darken($color, $darken);
      }
      @else {
        @warn "üî∂  fs-theme-color() darken amount must be a percentage, ignoring";
      }
    }

    @if $lighten {
      @if unit($lighten) == '%' {
        $color: lighten($color, $lighten);
      }
      @else {
        @warn "üî∂  fs-theme-color() lighten amount must be a percentage, ignoring";
      }
    }

    @if $opacity {
      $color: rgba($color, $opacity);
    }

    // Append theme class to current selector
    @if $self {
      &.#{$prefix + $area} {
        // Add pseudo selector if provided
        @if $pseudo {
          &:#{$pseudo} {
            @each $prop in $props {
              #{$prop}: $color;
            }
          }
        }
        @else {
          @each $prop in $props {
            #{$prop}: $color;
          }
        }
      }
    }
    // Prepend theme class as parent selector
    @else {
      .#{$prefix + $area} & {
        // Add pseudo selector if provided
        @if $pseudo {
          &:#{$pseudo} {
            @each $prop in $props {
              #{$prop}: $color;
            }
          }
        }
        @else {
          @each $prop in $props {
            #{$prop}: $color;
          }
        }
      }
    }

  }// end @each
}
