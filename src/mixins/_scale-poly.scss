/// Scale a value for any number of properites relative to the viewport width
/// @group Main
/// @access private
/// @ignore TODO: In next major version, rename fs-scale-poly() as fs-scale()
/// @param {String | List} $properties - Properties to scale
/// @param {Number} $start - Starting value
/// @param {Boolean} $initial [true] - Output initial value (not inside media query)
/// @param {String} $units ['rem'] - Output units
/// @require {function} fs-rem
/// @require {function} fs-scale
/// @require {mixin} fs-min-width
/// @require {mixin} fs-max-width
/// @ignore Demo https://www.sassmeister.com/gist/37c4f4876609516eebab247178ea4b3b
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @link https://github.com/Jakobud/poly-fluid-sizing
/// @example scss
///   @include fs-scale(font-size, (320px: 18px, 1024px: 38px));
/// @example scss
///   @include fs-scale(margin-bottom margin-top, (
///     320px: 18px,
///     768px: 26px,
///     1024px: 38px
///   ));
/// @example scss
///   @include fs-scale(font-size, (768px: 26px, 1024px: 38px), $initial: false);
/// @example scss
///   @include fs-scale(font-size, (768px: 26px, 1024px: 38px), $units: 'em');
@mixin fs-scale-poly($properties, $map, $initial: true, $units: 'rem') {
  $length: length($map);

  @if ($length < 2) {
    @error "fs-scale() requires at least two breakpoints";
  }

  $breakpoints: map-keys($map);
  $values: map-values($map);

  // Initial value
  $start-val: nth($values, 1);

  @if $initial {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($start-val);
      }
      @else {
        #{$property}: fs-rem($start-val);
      }
    }
  }

  // Scale up with calc() at each breakpoint
  @for $i from 1 through ($length - 1) {
    $prev-breakpoint: nth($breakpoints, $i);
    $new-breakpoint: nth($breakpoints, $i + 1);
    $prev-value: nth($values, $i);
    $new-value: nth($values, $i + 1);

    @include fs-min-width($new-breakpoint) {
      @each $property in $properties {
        #{$property}: fs-scale($prev-value, $new-value, $prev-breakpoint, $new-breakpoint, $units);
      }
    }
  }

  // Final value
  $end-val: nth($values, $length);
  $end-breakpoint: nth($breakpoints, $length);

  @include fs-min-width($end-breakpoint) {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($end-val);
      }
      @else {
        #{$property}: fs-rem($end-val);
      }
    }
  }
}
